/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZUI.java
 *
 * Created on Nov 16, 2011, 4:31:34 PM
 */
package projectz;

import zmachine.ZIO;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import javax.swing.text.Style;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.KeyStroke;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.awt.event.KeyListener;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.Toolkit;
import java.awt.Font;
import java.awt.Color;
import java.awt.FileDialog;
import java.io.File;
import java.util.ArrayList;


/**
 *
 * @author katharine
 */
public class ZUI extends javax.swing.JFrame implements ZIO {
    private String inputString;
    private final Object wait = new Object();
    private ZRunner runner;
    private ArrayList<String> history;
    private int historyPointer = 0;

    /** Creates new form ZUI */
    public ZUI() {
        initComponents();
        history = new ArrayList<String>();


        // Prepare our styles.
        StyledDocument doc = this.outputPanel.getStyledDocument();
        Style output = doc.addStyle("Output", null);
        Style bold = doc.addStyle("Input", null);
        StyleConstants.setBold(bold, true);
        Style italic = doc.addStyle("Comment", null);
        StyleConstants.setItalic(italic, true);
        StyleConstants.setForeground(italic, Color.DARK_GRAY);
        // Status bar styles
        StyledDocument bar = this.statusBar.getStyledDocument();
        Style location = bar.addStyle("Location", null);
        StyleConstants.setAlignment(location, StyleConstants.ALIGN_LEFT);
        Style score = bar.addStyle("Score", null);
        StyleConstants.setAlignment(score, StyleConstants.ALIGN_RIGHT);
        
        
        this.outputComment("To begin, load a story (File -> Load Story).");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputPanel = new javax.swing.JTextPane();
        statusBar = new javax.swing.JTextPane();
        scoreBar = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loadStoryItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ProjectZ");

        outputPanel.setEditable(false);
        outputPanel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(outputPanel);

        statusBar.setBackground(new java.awt.Color(0, 0, 0));
        statusBar.setEditable(false);
        statusBar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        statusBar.setForeground(new java.awt.Color(255, 255, 255));
        statusBar.setText("Nothing loaded");
        statusBar.setAutoscrolls(false);
        statusBar.setFocusable(false);

        scoreBar.setBackground(new java.awt.Color(0, 0, 0));
        scoreBar.setEditable(false);
        scoreBar.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        scoreBar.setForeground(new java.awt.Color(255, 255, 255));
        scoreBar.setAutoscrolls(false);
        scoreBar.setFocusable(false);
        SimpleAttributeSet attribs = new SimpleAttributeSet();
        StyleConstants.setAlignment(attribs, StyleConstants.ALIGN_RIGHT);
        scoreBar.setParagraphAttributes(attribs, false);

        jMenu1.setText("File");

        loadStoryItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        loadStoryItem.setText("Load Story");
        loadStoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadStoryItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadStoryItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(statusBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scoreBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 185, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(statusBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(scoreBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadStoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadStoryItemActionPerformed
        File file = this.chooseFile("Choose a Story", ZIO.LOAD);
        if(file == null) {
            this.outputComment("No story selected.");
            return;
        }
        if(this.runner != null) {
            this.runner.terminate();
            this.runner.interrupt();
        }
        
        this.reset();
        this.runner = new ZRunner(this, file);
        this.runner.start();
        
    }//GEN-LAST:event_loadStoryItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("apple.laf.useScreenMenuBar", "true");
        System.setProperty("com.apple.mrj.application.apple.menu.about.name", "ProjectZ");
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ZUI().setVisible(true);
            }
        });
    }
    
    @Override
    public void outputString(String str) {
        this.addText(str, "Output");
    }
    
    @Override
    public void outputComment(String comment) {
        this.addText(comment + "\n", "Comment");
    }
    
    @Override
    public void reset() {
        try {
            this.outputPanel.getDocument().remove(0, this.outputPanel.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(ZUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    protected void addText(final String str, String styleName) {
        final Style style = outputPanel.getStyledDocument().getStyle(styleName);
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    outputPanel.getDocument().insertString(outputPanel.getDocument().getLength(), str, style);
                    outputPanel.setCaretPosition(outputPanel.getDocument().getLength());
                } catch (BadLocationException ex) {
                    Logger.getLogger(ZUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    
    @Override
    public void outputLine(String str) {
        this.outputString(str + "\n");
    }
    
    @Override
    public String readLine() {
        final ZUI me = this;
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    // We want to read some text.
                    final StyledDocument doc = outputPanel.getStyledDocument();
                    Style style = doc.addStyle("InputField", null);
                    final JTextField field = new JTextField();
                    field.setFont(new Font("Lucida Grande", Font.BOLD, 14));
                    field.setBorder(new EmptyBorder(0,0,10,0));
                    StyleConstants.setComponent(style, field);
                    field.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            synchronized(wait) {
                                try {
                                    me.inputString = field.getText();
                                    
                                    // Now we cease to be a text box.
                                    doc.remove(doc.getLength() - 1, 1);
                                    me.addText(me.inputString + "\n", "Input");
                                    me.history.add(me.inputString);
                                    me.historyPointer = me.history.size();
                                    me.wait.notify();
                                } catch (BadLocationException ex) {
                                    Logger.getLogger(ZUI.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    });
                    
                    field.addKeyListener(new KeyListener() {
                        @Override
                        public void keyTyped(KeyEvent ke) {
                        }

                        @Override
                        public void keyPressed(KeyEvent ke) {
                        }

                        @Override
                        public void keyReleased(KeyEvent ke) {
                            if(ke.getKeyCode() == KeyEvent.VK_UP) {
                                if(historyPointer > 0)
                                    field.setText(me.history.get(--me.historyPointer));
                            } else if(ke.getKeyCode() == KeyEvent.VK_DOWN) {
                                if(historyPointer < me.history.size()) {
                                    me.historyPointer++;
                                    if(historyPointer < me.history.size())
                                        field.setText(me.history.get(me.historyPointer));
                                    else
                                        field.setText("");
                                }
                            }
                        }
                    });
                    
                    doc.insertString(doc.getLength(), "?", style);
                    field.requestFocusInWindow();
                } catch (BadLocationException ex) {
                    Logger.getLogger(ZUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        synchronized(wait) {
           try {
                wait.wait();
            } catch (InterruptedException ex) {
                //
            }
        }
        return this.inputString;
    }
    
    @Override
    public File chooseFile(String prompt, int type) {
        FileDialog chooser = new FileDialog(this, prompt, type);
        chooser.setVisible(true);
        String filename = chooser.getDirectory() + chooser.getFile();
        if(chooser.getFile() != null)
            return new File(filename);
        else
            return null;
    }
    
    @Override
    public boolean confirm(String question) {
        int result = JOptionPane.showConfirmDialog(null, question, "", JOptionPane.YES_NO_OPTION);
        return (result == JOptionPane.YES_OPTION);
    }
    
    @Override
    public void setStatus(String label, int a, int b, int type) {
        this.statusBar.setText(label);
        if(type == ZIO.SCORE) {
            this.scoreBar.setText("Score: " + a + ". Turns: " + b);
        } else {
            this.scoreBar.setText((a % 12) + ":" + b + " " + (a >= 12 ? "PM" : "AM"));
        }
    }
    
    @Override
    public void splitWindow(int lines) {
        
    }
    
    @Override
    public void setWindow(int win) {
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem loadStoryItem;
    private javax.swing.JTextPane outputPanel;
    private javax.swing.JTextPane scoreBar;
    private javax.swing.JTextPane statusBar;
    // End of variables declaration//GEN-END:variables
}
